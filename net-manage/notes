http://www.oschina.net/question/12_44528
如果你想知道你的服务器正在做干什么，你就需要了解一些基本的命令，一旦你精通了这些命令，那你就是一个 专业的 Linux 系统管理员。

有些 Linux 发行版会提供 GUI 程序来进行系统的监控，例如 SUSE Linux 就有一个非常棒而且专业的工具 YaST，KDE 的 KDE System Guard 同样很出色。当然，要使用这些工具，你必须在服务器跟前进行操作，而且这些 GUI 的程序占用了很多系统资源，所以说，尽管 GUI 用来做基本的服务器健康状态监测挺好，但如果你想知道真正发生什么，请关掉 GUI 开始命令行之旅吧。

你应该只在需要的时候去启动 GUI ，不用的时候关掉它。如果要让服务器保持最佳性能，你应该将 Linux 服务器的运行级别 runlevel 设置为 3 ，就是控制台模式，当你需要图形化桌面的时候使用 startx 命令来启动它。

如果你的服务器启动后就直接进入图形界面，你需要修改配置 /etc/inittab 找到 initdefault 一样，将 id:5:initdefault 修改为 id:3:initdefault。

如果你没找到 /etc/inittab 文件，那就创建一个新的，文件内容增加 id:3 这么一行。这样下次服务器启动的时候就不会进入图形界面。如果你不想等到服务器重启的时候才生效，你可以执行 init 3 这个命令。

一旦你的服务器是在控制台模式下运行，你就可以开始我们接下来的内容。
iostat

iostat 命令用来显示存储子系统的详细信息，通常用它来监控磁盘 I/O 的情况。要特别注意 iostat 统计结果中的 %iowait 值，太大了表明你的系统存储子系统性能低下。
meminfo 和 free

Meminfo 可让你获取内存的详细信息，你可以使用 cat 和 grep 命令来显示 meminfo 信息：

cat /proc/meminfo

另外你可以使用 free 命令来显示动态的内存使用信息，free 只是给你大概的内存信息，而 meminfo 提供的信息更加详细。例如在 oschina 上的 free 命令执行结果：

mpstat

mpstat mpstat是MultiProcessor Statistics的缩写，是实时系统监控工具。其报告与CPU的一些统计信息，这些信息存放在/proc/stat文件中。在多CPUs系统里，其不但能查看所有CPU的平均状况信息，而且能够查看特定CPU的信息。

sudo netstat -ltpn
再来看看 oschina 上的 mpstat 命令执行结果：

关于 mpstat 执行结果中的参数意思请参考此贴。
netstat

Netstat 和 ps 命令类似，是 Linux 管理员基本上每天都会用的工具，它显示了大量跟网络相关的信息，例如 socket 的使用、路由、接口、协议、网络等等，下面是一些常用的参数：

-a Show all socket information
-r Show routing information
-i Show network interface statistics
-s Show network protocol statistics

nmon

Nmon, 是 Nigel's Monitor 的缩写，是一个使用很普遍的开源工具，用以监控 Linux 系统的性能。Nmon 监控多个子系统的性能数据，例如处理器的使用率、内存使用率、队列、磁盘I/O统计、网络I/O统计、内存页处理和进程信息。Nmon 也提供了一个图形化的工具：

sjvn_LinuxServerMonitoring_nmon.png

要运行 nmon，你可以在命令行中启动它，然后选择要监控的子系统，这些子系统都对应有一个快捷键，例如输入 c 可查看 CPU 信息，m用于查看内存，d用来查看磁盘信息等，你也可以使用 -f 命令将 nmon 的执行结果保存到一个 CSV 文件中，便于日后分析。

在每日的监控工作中，我发现 nmon 是我最常用的工具。
pmap

pmap 命令用来报告每个进程占用内存的详细情况，可用来看是否有进程超支了，该命令需要进程 id 作为参数。
ps 和 pstree

ps 和 pstree 命令是 Linux 系统管理员最好的朋友，都可以用来列表正在运行的所有进程。ps 告诉你每个进程占用的内存和 CPU 处理时间，而 pstree 显示的信息没那么详细，但它以树形结构显示进程之间的依赖关系，包括子进程信息。一旦发现某个进程有问题，你可以使用 kill 来杀掉它。
sar

sar 程序是系统监控工具里的瑞士军刀。该程序包含三个工具：sar 用来显示数据，sa1 和 sa2 用来收集数据并保存。sar 可用来显示 CPU 使用率、内存页数据、网络 I/O 和传输统计、进程创建活动和磁盘设备的活动详情。sar 和 nmon 最大的不同就是 sar 跟适合用作长期的监控，而 nmon 可以让你快速的了解系统当前状态。
strace

strace 经常被认为是程序员调试的工具，但不止如此。它可以记录进程进行系统调用的详情，因此它也是一个非常好的诊断工具，例如你可以使用它来找出某个程序正在打开某个配置文件。

Strace 也有一个缺陷，但它在跟踪某个进程时会让该进程的性能变得非常差，因此请谨慎使用。
tcpdump

Tcpdump 是一个简单、可靠的网络监控工具，用来做基本的协议分析，看看那些进程在使用网络以及如何使用网络。当然，如果你要获取跟详细的信息，你应该使用 Wireshark (下面我们会介绍).
top

top 命令显示当前的活动进程，默认它是按消耗 CPU 的厉害程度进行排序，每5秒钟刷新一次列表，你也可以选择不同的排序方式，例如 m 是按内存占用方式进行排序的快捷键。
uptime

uptime 命令告诉你这台服务器从开机启动到现在已经运行了多长时间了。同时也包含了从启动到现在服务器的平均负载情况，看看 oschina 的数据：

我已经忘了上次是为什么重启机器了，好像是换了个机柜。
vmstat

你可以使用 vmstat 来监控虚拟内存，一般 Linux 上的开发者喜欢使用虚拟内存来获得最佳的存储性能。该命令报告关于内核线程、虚拟内存、磁盘、陷阱和 CPU 活动的统计信息。由 vmstat 命令生成的报告可以用于平衡系统负载活动。系统范围内的这些统计信息（所有的处理器中）都计算出以百分比表示的平均值，或者计算其总和。

在 oschina 上执行 vmstat 的结果：

Wireshark

Wireshark, 前身是 Ethereal ，是一个网络协议检测程序，让您经由程序抓取运行的网站的相关资讯，包括每一封包流向及其内容、资讯可依操作系统语系看出,方便查看、监控TCP session动态等等.

这里罗列的是大多数最有价值的 Linux 监控程序，当然，你可能还会使用其他的工具，不妨跟大家分享下。



sudo netstat -altp |grep 8000




1.  查看端口占用情况的命令：lsof -i
    [root@www ~]# lsof -i
     
    COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME
    nginx 2333 root 6u IPv4 6242 TCP *:http (LISTEN)
    nginx 2334 www 6u IPv4 6242 TCP *:http (LISTEN)
    sshd 2349 root 3u IPv6 6283 TCP *:ndmp (LISTEN)
    sshd 2349 root 4u IPv6 6286 TCP *:ssh (LISTEN)

这里返回了Linux当前所有打开端口的占用情况。
第一段是进程，最后一列是侦听的协议、侦听的IP与端口号、状态。
如果端口号是已知的常用服务（如80、21等），则会直接显示协议名称，如http、ftp、ssh等。

 
2. 查看某一端口的占用情况： lsof -i:端口号
    [root@www ~]# lsof -i:21
     
    COMMAND PID USER FD TYPE DEVICE SIZE NODE NAME
    pure-ftpd 2651 root 4u IPv4 7047 TCP *:ftp (LISTEN)
    pure-ftpd 2651 root 5u IPv6 7048 TCP *:ftp (LISTEN)

这里显示出21号端口正在被pure-ftpd使用，状态是listen。

3. 查看某进程占用的端口号
 netstat -anp
 [root@www ~]# netstat -anp | grep syslog
  udp        0      0 0.0.0.0:514                 0.0.0.0:*                               31483/syslogd 
 
4. 查看某端口被占用的进程
 [root@nbatest ~]# netstat -altp |grep 9999
  tcp        0      0 0.0.0.0:9999                0.0.0.0:*                   LISTEN      16315/gate_applicat
 
5. 一进程确定占用某一tcp端口，如下命令可以杀掉该进程。
    kill -9 $(netstat -tlnp|grep 9999|awk '{print $7}'|awk -F '/' '{print $1}')

6. 结束占用端口的进程：killall 进程名

虽然我们不建议用这种本末倒置的方法来解决冲突问题，
但某些情况下还是可以直接结束掉占用进程的（比如重启Apache时进程没有完全退出，导致重启失败）
[root@www ~]# killall application

这样，所有的application进程都会被结束掉。
